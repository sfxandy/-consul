#!/usr/bin/env python3
import argparse, json
from http.server import ThreadingHTTPServer, SimpleHTTPRequestHandler, BaseHTTPRequestHandler
from functools import partial

class EchoHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        body = {
            "method": "GET",
            "path": self.path,
            "client": self.client_address[0],
            "headers": {k: v for k, v in self.headers.items()}
        }
        data = json.dumps(body).encode("utf-8")
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.send_header("Content-Length", str(len(data)))
        self.end_headers()
        self.wfile.write(data)

    def log_message(self, fmt, *args):  # quieter logs
        return

def main():
    ap = argparse.ArgumentParser(description="Bind an HTTP server to a specific address/port.")
    ap.add_argument("--host", default="0.0.0.0", help="IP/interface to bind (e.g. 127.0.0.1 or 10.0.0.5)")
    ap.add_argument("--port", type=int, default=8080, help="Port to bind (default: 8080)")
    ap.add_argument("--static", metavar="DIR", help="Serve files from DIR instead of echoing JSON")
    args = ap.parse_args()

    if args.static:
        handler = partial(SimpleHTTPRequestHandler, directory=args.static)
    else:
        handler = EchoHandler

    httpd = ThreadingHTTPServer((args.host, args.port), handler)
    print(f"Serving HTTP on {args.host}:{args.port} "
          f"{'(static dir: ' + args.static + ')' if args.static else '(echo JSON)'} â€” Ctrl+C to stop")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    main()

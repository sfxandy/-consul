    # 2) App container (registers with local agent, serves on :8080 using Python)
    - name: app
      image: registry.example.com/org/rhel9-base:latest   # <-- your approved RHEL9 image
      command: ["/bin/sh","-lc"]
      args:
        - |
          set -e

          # Write registration JSON for service-b
          cat > /tmp/service-b.json <<'EOF'
          {
            "service": {
              "name": "service-b",
              "port": 8080,
              "check": { "http": "http://127.0.0.1:8080/health", "interval": "10s" },
              "connect": { "sidecar_service": {} }
            }
          }
          EOF

          # Register with the local Consul agent (localhost only)
          curl -sS -X PUT --data @/tmp/service-b.json \
            http://127.0.0.1:8500/v1/agent/service/register

          # Create minimal Python HTTP server with /health + default
          cat > /tmp/app.py <<'PYEOF'
          from http.server import BaseHTTPRequestHandler, HTTPServer

          class Handler(BaseHTTPRequestHandler):
              def do_GET(self):
                  if self.path == "/health":
                      body = b"ok\n"
                  else:
                      body = b"hello from service-b\n"
                  self.send_response(200)
                  self.send_header("Content-Type", "text/plain")
                  self.send_header("Content-Length", str(len(body)))
                  self.end_headers()
                  self.wfile.write(body)

          HTTPServer(("0.0.0.0", 8080), Handler).serve_forever()
          PYEOF

          exec python3 /tmp/app.py
      env:
        - name: CONSUL_HTTP_ADDR
          value: "http://127.0.0.1:8500"
      ports:
        - containerPort: 8080

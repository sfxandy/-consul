# mock_service_stdlib.py
import json, os, signal, sys, time
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer

SERVICE_NAME   = os.getenv("SERVICE_NAME", "mock-service")
MESSAGE        = os.getenv("MESSAGE", f"Hello from {SERVICE_NAME}")
PORT           = int(os.getenv("PORT", "5000"))
START_TIME     = time.time()

# Optional behaviour knobs
READY_DELAY_S  = float(os.getenv("READY_DELAY_S", "0"))    # delay before health returns 200
FAIL_AFTER_S   = float(os.getenv("FAIL_AFTER_S", "0"))     # after N seconds, health returns 500
EXTRA_LATENCY  = float(os.getenv("EXTRA_LATENCY_S", "0"))  # add to all requests
HEALTH_PAYLOAD = os.getenv("HEALTH_PAYLOAD", '{"status":"healthy"}')

def healthy_now():
    up_for = time.time() - START_TIME
    if up_for < READY_DELAY_S:
        return False, 503, {"status":"starting","up_seconds":up_for}
    if FAIL_AFTER_S and up_for >= FAIL_AFTER_S:
        return False, 500, {"status":"failing","up_seconds":up_for}
    return True, 200, {"status":"healthy","up_seconds":up_for}

class Handler(BaseHTTPRequestHandler):
    def _json(self, code, payload):
        body = json.dumps(payload).encode("utf-8")
        self.send_response(code)
        self.send_header("Content-Type", "application/json")
        self.send_header("Content-Length", str(len(body)))
        self.end_headers()
        self.wfile.write(body)

    def do_GET(self):
        if EXTRA_LATENCY > 0:
            time.sleep(EXTRA_LATENCY)

        if self.path == "/" or self.path.startswith("/api"):
            self._json(200, {"service": SERVICE_NAME, "message": MESSAGE})
        elif self.path == "/health":
            ok, code, payload = healthy_now()
            # Allow overriding the body via env var if you want fixed JSON/text
            try:
                payload = json.loads(HEALTH_PAYLOAD)
            except Exception:
                payload = {"status":"healthy"}
            self._json(code, payload)
        else:
            self._json(404, {"error": "not found"})

    # Silence default noisy logging
    def log_message(self, fmt, *args):
        sys.stdout.write("%s - - [%s] %s\n" %
                         (self.address_string(), self.log_date_time_string(), fmt % args))

def _graceful_shutdown(server):
    def handler(signum, frame):
        sys.stdout.write("Received signal %s, shutting down...\n" % signum)
        server.shutdown()
    return handler

if __name__ == "__main__":
    httpd = ThreadingHTTPServer(("0.0.0.0", PORT), Handler)
    signal.signal(signal.SIGTERM, _graceful_shutdown(httpd))
    signal.signal(signal.SIGINT,  _graceful_shutdown(httpd))
    sys.stdout.write(f"Starting {SERVICE_NAME} on :{PORT}\n")
    httpd.serve_forever()


